version: '3.6'

services:
  # DHCP compatible with glass https://github.com/Akkadius/glass-isc-dhcp/blob/master/docker-compose.yaml
  dhcp-server:
    image: "networkboot/dhcpd"
    container_name: dhcp-server
    hostname: dhcp-server
    networks:
      external:
        ipv4_address: '${SUBNET_PREFIX}.2'
    volumes:
    - ./dhcp/:/data/

  # Create AMWA NMOS Testing container instance
  nmos-testing:
    image: amwa/nmos-testing:jtnm.aug2022-v1.1
    container_name: nmos-testing
    hostname: nmos-testing
    domainname: nmos-testing.jt-nm.org
    entrypoint: |
       /bin/bash -c "/etc/init.d/dbus start;
       /etc/init.d/avahi-daemon start;
       python3 nmos-test.py & python3 nmos-testing-facade.py"
    ports:
    - "5000:5000"
    volumes:
    - "./UserConfig.py:/config/UserConfig.py"
    networks:
      external:
        ipv4_address: '${SUBNET_PREFIX}.3'

  # Just a utility for network troubleshooing
  busybox:
    image: busybox
    container_name: busybox
    entrypoint: |
        /bin/sh -c "tail -f /dev/null"
    networks:
      external:
        ipv4_address: '${SUBNET_PREFIX}.4'

  ## Create NMOS Registry/Controller container instance
  #nmos-registry:
  #  image: rhastie/nmos-cpp:latest
  #  container_name: nmos-registry
  #  hostname: nmos-registry
  #  domainname: local
  #  ports:
  #  - "80-81:80-81"
  #  - "1883:1883"
  #  volumes:
  #  - "./nmos-cpp/registry.json:/home/registry.json"
  #  environment:
  #  - RUN_NODE=FALSE
  #  networks:
  #    external:
  #      ipv4_address: '${SUBNET_PREFIX}.53'

  ## Create NMOS Virtual Node container instance
  #nmos-virtnode:
  #  image: rhastie/nmos-cpp:latest
  #  container_name: nmos-virtnode
  #  hostname: nmos-virtnode-ebulist
  #  domainname: nmos-testing.jt-nm.org
  #  dns_search: nmos-testing.jt-nm.org
  #  ports:
  #  - "8000-8100:8000-8100"
  #  volumes:
  #  - "./nmos-cpp/node_manual.json:/home/node.json"
  #  environment:
  #  - RUN_NODE=TRUE
  #  networks:
  #    external:
  #      ipv4_address: '${SUBNET_PREFIX}.54'

networks:
    external:
        # Create external macvlan subnet using host physical interface allowing containers to have their own IP addresses
        driver: macvlan
        driver_opts:
            parent: '${IFACE}'
        ipam:
            config:
            - subnet: '${SUBNET_PREFIX}.0/24'
              gateway: '${SUBNET_PREFIX}.1'
